'''
Contains Schedstat() class

Ref: http://eaglet.rain.com/rick/linux/schedstat/

This is the order of metrics in /proc/schedstat::

 version 15
 timestamp 4296481721
 cpu0 1707923 0 4496460 1347464 1984677 956525 139894698187 8427892054 1732218
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000011
         106886 102427 3687 3645322 826 92 4 102423 2383 2375 6 8215 5 0 0
         2375
         1161379 1158140 2434 2162206 1000 15 42 1158098 9 0 9 0 0 0 0 0 0
         34647
         971 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         000000ff
         104624 85880 16771 11659160 2466 75 273 65017 1167 1164 0 1319 3 0 0
         240 1160574 1103044 54333 42138202 4234 12 788 1102256 52 1 51 0 0 0
          0
         0 0 993470 29446 0
 cpu1 1294398 0 4379585 1461296 1113398 592708 160016765834 8434349108 1766612
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000022
         97552 95658 1214 1573630 739 10 0 95658 2193 2180 11 13447 2 0 0 2180
         1199099 1196161 2209 1995185 870 9 49 1196112 5 0 5 0 0 0 0 0 0 32407
         453 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         000000ff
         97671 80738 15438 10042869 1938 56 102 58031 1074 1069 1 3449 6 0 0
          212
         1198370 1148695 46458 37434083 4231 15 897 1147798 37 2 35 0 0 0 0
          0 0
         488283 37715 0
 cpu2 1734479 0 3538432 859648 884964 423575 137042687970 9116341267 1159453
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000044
         100093 98632 789 1143577 737 5 10 98622 2144 2136 6 6837 3 0 0 2136
         758167 755134 2174 2150743 1064 8 51 755083 4 0 4 0 0 0 0 0 0 25069
         229 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         000000ff
         97879 84276 12229 8279936 1787 35 112 61336 1076 1068 5 3981 4 0 0
         264
         757308 711704 42824 34298231 3679 7 753 710951 27 2 25 0 0 0 0 0 0
         436320 27389 0
 cpu3 2166968 0 3957165 841496 903140 445696 128041812584 8771159041 1212016
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000088
         94602 93280 668 1033027 727 10 16 93264 2324 2321 2 3967 2 0 0 2321
         689945 687055 1834 2131508 1369 7 55 687000 10 1 9 0 0 0 0 0 0 25949
         189 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         000000ff
         93518 81292 10890 7893430 1745 23 101 65112 1226 1221 2 1831 5 0 0
         226
         688889 646512 39594 31260047 3538 10 659 645853 18 1 17 0 0 0 0 0 0
         431495 18462 0
 cpu4 1832345 0 2343598 232964 240334 119296 39975691136 2244406761 490389
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000011
         96946 93337 2666 3140764 1077 90 33 93304 532 510 19 20788 3 0 0 510
         207451 202489 3618 3873889 1797 49 61 202428 88 0 88 0 0 0 0 0 0
         22395
         170 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         000000ff
         93234 92635 583 524819 19 2 3 14947 637 637 0 0 0 0 0 0 206107
         177287
         26508 23579465 3335 0 526 176761 1 0 1 0 0 0 0 0 0 98643 967 0
 cpu5 2516496 0 3038552 230326 262590 135979 41133916590 2479995147 496431
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000022
         99709 95985 2880 3285672 986 99 9 95976 527 516 11 9829 0 0 0 516
         209007 204704 3064 3677204 1685 36 72 204632 98 0 98 0 0 0 0 0 0
         21761
         197 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
           000000ff
         96574 95501 1058 935480 19 3 4 22041 508 508 0 0 0 0 0 0 207768
         178490
         26721 24653625 3640 1 540 177950 3 1 2 0 0 0 0 0 0 104850 1388 0
 cpu6 1734711 0 2226544 218530 243151 122017 39943509807 2091688496 447214
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000044
         98238 93635 3581 4071872 1209 115 23 93612 536 507 27 28871 3 0 0 507
         194532 189822 3294 3801394 1918 51 66 189756 112 1 111 0 0 0 0 0 0
         15770 193 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         000000ff
         94495 93530 954 800026 13 0 4 21334 543 543 0 0 0 0 0 0 193116 167868
         23026 21097891 3212 1 538 167330 1 1 0 0 0 0 0 0 0 105364 976 0
 cpu7 1701768 0 2219948 229118 269333 131993 43109560637 2343720169 437657
 domain0 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         00000088
         97159 93022 2908 3432941 1431 89 9 93013 553 533 17 18710 3 0 0 533
         197957 193143 3226 3781166 2216 39 75 193068 91 6 85 0 0 0 0 0 0
         16565
         175 0
 domain1 00000000,00000000,00000000,00000000,00000000,00000000,00000000,
         000000ff
         92961 91928 1024 883915 13 2 5 19057 675 675 0 0 0 0 0 0 196369
         171937
         22141 20237067 3288 2 465 171472 2 0 2 0 0 0 0 0 0 120775 1031 0

.. warning::
   This class currently returns lists and is incomplete. Get field names
   and modify to return dicts instead of lists

'''

from itertools import islice
from logging import getLogger
from os import path as ospath
import re

from .readfile import ReadFile

LOGGER = getLogger(__name__)


class Schedstat(ReadFile):
    '''
    Schedstat handling
    '''
    FILENAME = ospath.join('proc', 'schedstat')
    KEY = 'schedstat'
    RE1 = re.compile('^cpu')
    RE2 = re.compile('^domain')

    def normalize(self):
        '''
        Translates data into dictionary

        The schedstat file is a table - each record  according to kernel
        version so we store the data in simple lists as we do not currently
        know the field names.
        The file consists of 3 records for every cpu - this class returns
        a dictionary keyed on cpuN where N varies from 0 upwards
        '''
        LOGGER.debug("Normalize")
        lines = self.lines
        ret = {}

        rec = None
        for line in lines:
            vals = line.split()
            key1 = vals[0]
            if key1 == 'version':
                ret[key1] = vals[1:]

            elif key1 == 'timestamp':
                ret[key1] = vals[1:]

            elif self.RE1.match(key1):
                rec = key1
                ret[key1] = [int(v) for v in islice(vals, 1, None)]

            elif rec:
                if self.RE2.match(key1):
                    key2 = '%s-%s' % (rec, key1)
                    ret[key2] = [vals[1]]
                    ret[key2].extend([int(v) for v in islice(vals, 2, None)])

        return ret
